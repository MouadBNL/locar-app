/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoIndexRouteImport } from './routes/demo/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AppVehiclesIndexRouteImport } from './routes/app/vehicles/index'
import { Route as AppCustomersIndexRouteImport } from './routes/app/customers/index'
import { Route as AppVehiclesCreateRouteImport } from './routes/app/vehicles/create'
import { Route as AppVehiclesIdRouteImport } from './routes/app/vehicles/$id'
import { Route as AppCustomersCreateRouteImport } from './routes/app/customers/create'
import { Route as AppCustomersIdRouteImport } from './routes/app/customers/$id'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoIndexRoute = DemoIndexRouteImport.update({
  id: '/demo/',
  path: '/demo/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AppVehiclesIndexRoute = AppVehiclesIndexRouteImport.update({
  id: '/vehicles/',
  path: '/vehicles/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCustomersIndexRoute = AppCustomersIndexRouteImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppVehiclesCreateRoute = AppVehiclesCreateRouteImport.update({
  id: '/vehicles/create',
  path: '/vehicles/create',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppVehiclesIdRoute = AppVehiclesIdRouteImport.update({
  id: '/vehicles/$id',
  path: '/vehicles/$id',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCustomersCreateRoute = AppCustomersCreateRouteImport.update({
  id: '/customers/create',
  path: '/customers/create',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCustomersIdRoute = AppCustomersIdRouteImport.update({
  id: '/customers/$id',
  path: '/customers/$id',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/app/': typeof AppIndexRoute
  '/demo': typeof DemoIndexRoute
  '/app/customers/$id': typeof AppCustomersIdRoute
  '/app/customers/create': typeof AppCustomersCreateRoute
  '/app/vehicles/$id': typeof AppVehiclesIdRoute
  '/app/vehicles/create': typeof AppVehiclesCreateRoute
  '/app/customers': typeof AppCustomersIndexRoute
  '/app/vehicles': typeof AppVehiclesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/app': typeof AppIndexRoute
  '/demo': typeof DemoIndexRoute
  '/app/customers/$id': typeof AppCustomersIdRoute
  '/app/customers/create': typeof AppCustomersCreateRoute
  '/app/vehicles/$id': typeof AppVehiclesIdRoute
  '/app/vehicles/create': typeof AppVehiclesCreateRoute
  '/app/customers': typeof AppCustomersIndexRoute
  '/app/vehicles': typeof AppVehiclesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/app/': typeof AppIndexRoute
  '/demo/': typeof DemoIndexRoute
  '/app/customers/$id': typeof AppCustomersIdRoute
  '/app/customers/create': typeof AppCustomersCreateRoute
  '/app/vehicles/$id': typeof AppVehiclesIdRoute
  '/app/vehicles/create': typeof AppVehiclesCreateRoute
  '/app/customers/': typeof AppCustomersIndexRoute
  '/app/vehicles/': typeof AppVehiclesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/about'
    | '/auth/signin'
    | '/auth/signup'
    | '/app/'
    | '/demo'
    | '/app/customers/$id'
    | '/app/customers/create'
    | '/app/vehicles/$id'
    | '/app/vehicles/create'
    | '/app/customers'
    | '/app/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/auth/signin'
    | '/auth/signup'
    | '/app'
    | '/demo'
    | '/app/customers/$id'
    | '/app/customers/create'
    | '/app/vehicles/$id'
    | '/app/vehicles/create'
    | '/app/customers'
    | '/app/vehicles'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/about'
    | '/auth/signin'
    | '/auth/signup'
    | '/app/'
    | '/demo/'
    | '/app/customers/$id'
    | '/app/customers/create'
    | '/app/vehicles/$id'
    | '/app/vehicles/create'
    | '/app/customers/'
    | '/app/vehicles/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  DemoIndexRoute: typeof DemoIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/': {
      id: '/demo/'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/vehicles/': {
      id: '/app/vehicles/'
      path: '/vehicles'
      fullPath: '/app/vehicles'
      preLoaderRoute: typeof AppVehiclesIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/customers/': {
      id: '/app/customers/'
      path: '/customers'
      fullPath: '/app/customers'
      preLoaderRoute: typeof AppCustomersIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/vehicles/create': {
      id: '/app/vehicles/create'
      path: '/vehicles/create'
      fullPath: '/app/vehicles/create'
      preLoaderRoute: typeof AppVehiclesCreateRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/vehicles/$id': {
      id: '/app/vehicles/$id'
      path: '/vehicles/$id'
      fullPath: '/app/vehicles/$id'
      preLoaderRoute: typeof AppVehiclesIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/customers/create': {
      id: '/app/customers/create'
      path: '/customers/create'
      fullPath: '/app/customers/create'
      preLoaderRoute: typeof AppCustomersCreateRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/customers/$id': {
      id: '/app/customers/$id'
      path: '/customers/$id'
      fullPath: '/app/customers/$id'
      preLoaderRoute: typeof AppCustomersIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppCustomersIdRoute: typeof AppCustomersIdRoute
  AppCustomersCreateRoute: typeof AppCustomersCreateRoute
  AppVehiclesIdRoute: typeof AppVehiclesIdRoute
  AppVehiclesCreateRoute: typeof AppVehiclesCreateRoute
  AppCustomersIndexRoute: typeof AppCustomersIndexRoute
  AppVehiclesIndexRoute: typeof AppVehiclesIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppCustomersIdRoute: AppCustomersIdRoute,
  AppCustomersCreateRoute: AppCustomersCreateRoute,
  AppVehiclesIdRoute: AppVehiclesIdRoute,
  AppVehiclesCreateRoute: AppVehiclesCreateRoute,
  AppCustomersIndexRoute: AppCustomersIndexRoute,
  AppVehiclesIndexRoute: AppVehiclesIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  DemoIndexRoute: DemoIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
